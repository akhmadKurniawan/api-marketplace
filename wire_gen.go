// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"app/application/infrastructure/repository"
	"app/application/use_case/costumer/create_costumer"
	"app/application/use_case/login"
	"app/application/use_case/product/create_product"
	"app/application/use_case/product_type/create_product_type"
	"app/application/use_case/seller/create_seller"
	"app/application/use_case/seller/delete_seller"
	"app/application/use_case/shop/create_shop"
	"app/application/use_case/transaction/create_transaction"
	"app/application/use_case/transaction/update_transaction"
	"app/application/use_case/user/create_user"
	"app/application/use_case/user/delete_user"
	"app/application/use_case/user/update_user"
	"app/application/use_case/walet/create_walet"
	"gorm.io/gorm"
)

// Injectors from injection.go:

func CreateUserHandler(db *gorm.DB) create_user.CreateUserHandler {
	userRepository := repository.NewUserRepository(db)
	sellerRepository := repository.NewSellerRepository(db)
	costumerRepository := repository.NewCostumerRepository(db)
	createUserService := create_user.NewCreateUserService(userRepository, sellerRepository, costumerRepository)
	createUserHandler := create_user.NewCreateUserHandler(createUserService)
	return createUserHandler
}

func UpdateUserHandler(db *gorm.DB) update_user.UpdateUserHandler {
	userRepository := repository.NewUserRepository(db)
	updateUserService := update_user.NewUpdateUserService(userRepository)
	updateUserHandler := update_user.NewUpdateUserHandler(updateUserService)
	return updateUserHandler
}

func DeleteUserHandler(db *gorm.DB) delete_user.DeleteUserHandler {
	userRepository := repository.NewUserRepository(db)
	deleteUserService := delete_user.NewDeleteUserService(userRepository)
	deleteUserHandler := delete_user.NewDeleteUserHandler(deleteUserService)
	return deleteUserHandler
}

func LoginHandler(db *gorm.DB) login.LoginHandler {
	loginRepository := repository.NewLoginRepository(db)
	userRepository := repository.NewUserRepository(db)
	loginService := login.NewLoginService(loginRepository, userRepository)
	loginHandler := login.NewLoginHandler(loginService)
	return loginHandler
}

func CreateSellerHandler(db *gorm.DB) create_seller.CreateSellerHandler {
	sellerRepository := repository.NewSellerRepository(db)
	createSellerService := create_seller.NewCreateSellerService(sellerRepository)
	createSellerHandler := create_seller.NewCreateSellerHandler(createSellerService)
	return createSellerHandler
}

func DeleteSellerHandler(db *gorm.DB) delete_seller.DeleteSellerHandler {
	sellerRepository := repository.NewSellerRepository(db)
	deleteSellerService := delete_seller.NewDeleteSellerService(sellerRepository)
	deleteSellerHandler := delete_seller.NewDeleteSellerHandler(deleteSellerService)
	return deleteSellerHandler
}

func CreateCostumerHandler(db *gorm.DB) create_costumer.CreateCostumerHandler {
	costumerRepository := repository.NewCostumerRepository(db)
	createCostumerService := create_costumer.NewCreateCostumerService(costumerRepository)
	createCostumerHandler := create_costumer.NewCreateCostumerHandler(createCostumerService)
	return createCostumerHandler
}

func CreateProductHandler(db *gorm.DB) create_product.CreateProductHandler {
	productRepository := repository.NewProductRepository(db)
	shopRepository := repository.NewShopRepository(db)
	productTypeRepository := repository.NewProductTypeRepository(db)
	createProductService := create_product.NewCreateProductService(productRepository, shopRepository, productTypeRepository)
	createProductHandler := create_product.NewCreateProductHandler(createProductService)
	return createProductHandler
}

func CreateProductTypeHandler(db *gorm.DB) create_product_type.CreateProductTypeHandler {
	productTypeRepository := repository.NewProductTypeRepository(db)
	createProductTypeService := create_product_type.NewCreateProductTypeService(productTypeRepository)
	createProductTypeHandler := create_product_type.NewCreateProductTypeHandler(createProductTypeService)
	return createProductTypeHandler
}

func CreateShopHandler(db *gorm.DB) create_shop.CreateShopHandler {
	shopRepository := repository.NewShopRepository(db)
	sellerRepository := repository.NewSellerRepository(db)
	createShopService := create_shop.NewCreateShopService(shopRepository, sellerRepository)
	createShopHandler := create_shop.NewCreateShopHandler(createShopService)
	return createShopHandler
}

func CreateTransactionHandler(db *gorm.DB) create_transaction.CreateTransactionHandler {
	transactionRepository := repository.NewTransactionRepository(db)
	productRepository := repository.NewProductRepository(db)
	waletRepository := repository.NewWaletRepository(db)
	sellerRepository := repository.NewSellerRepository(db)
	shopRepository := repository.NewShopRepository(db)
	createTransactionService := create_transaction.NewCreateTransactionService(transactionRepository, productRepository, waletRepository, sellerRepository, shopRepository)
	createTransactionHandler := create_transaction.NewCreateTransactionHandler(createTransactionService)
	return createTransactionHandler
}

func UpdateTransactionHandler(db *gorm.DB) update_transaction.UpdateTransactionHandler {
	transactionRepository := repository.NewTransactionRepository(db)
	updateTransactionService := update_transaction.NewUpdateTransactionService(transactionRepository)
	updateTransactionHandler := update_transaction.NewUpdateTransactionHandler(updateTransactionService)
	return updateTransactionHandler
}

func CreateWaletHandler(db *gorm.DB) create_walet.CreateWaletHandler {
	waletRepository := repository.NewWaletRepository(db)
	createWaletService := create_walet.NewCreateWaletService(waletRepository)
	createWaletHandler := create_walet.NewCreateWaletHandler(createWaletService)
	return createWaletHandler
}
